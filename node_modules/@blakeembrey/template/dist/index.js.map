{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;AAAA,MAAM,aAAa,GAAG,MAAM,CAAC;AAI7B;;GAEG;AACH,SAAgB,OAAO,CAAC,KAAa,EAAE,WAAW,GAAG,UAAU;IAC7D,MAAM,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC,EAAE;QAC/C,IAAI,IAAI,KAAK,GAAG;YAAE,OAAO,KAAK,CAAC;QAC/B,OAAO,OAAO,aAAa,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,MAAM,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,OAAO,YAAY,WAAW,IAAI,aAAa,eAAe,GAAG,MAAM,CAAC;AAC1E,CAAC;AAPD,0BAOC;AAED;;GAEG;AACH,SAAgB,QAAQ,CACtB,KAAa,EACb,WAAoB;IAEpB,MAAM,IAAI,GAAG,OAAO,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;IACzC,OAAO,IAAI,QAAQ,CAAC,WAAW,IAAI,IAAI,CAAC,EAAiB,CAAC;AAC5D,CAAC;AAND,4BAMC","sourcesContent":["const DATA_VAR_NAME = \"data\";\n\nexport type Template<T extends object> = (data: T) => string;\n\n/**\n * Stringify a template into a function.\n */\nexport function compile(value: string, displayName = \"template\") {\n  const str = value.replace(/\"|{{[^{]+}}/g, prop => {\n    if (prop === '\"') return '\\\\\"';\n    return `\" + ${DATA_VAR_NAME}.${prop.slice(2, -2).trim()} + \"`;\n  });\n\n  return `function ${displayName}(${DATA_VAR_NAME}) { return \"${str}\"; }`;\n}\n\n/**\n * Fast and simple string templates.\n */\nexport function template<T extends object = object>(\n  value: string,\n  displayName?: string\n) {\n  const body = compile(value, displayName);\n  return new Function(`return (${body});`)() as Template<T>;\n}\n"]}